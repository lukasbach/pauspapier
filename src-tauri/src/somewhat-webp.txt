
#![cfg_attr(
  all(not(debug_assertions), target_os = "windows"),
  windows_subsystem = "windows"
)]

#[tauri::command]
fn make_screenshot() {
  use screenshots::Capturer;
  use std::{fs::File, io::Write, time::Instant};
  use image::*;
  use webp::*;
  use std::path::Path;

  println!("I was invoked from JS!");
  let start = Instant::now();

  let capturers = Capturer::screen_capturers();

  for capturer in capturers {
    println!("1capturer {:?}", capturer);
    let image = capturer.capture_screen().unwrap();
    // let buffer = image.png();
    let buffer = image.bytes();
    let display_id = capturer.display_info.id.to_string();
    let path = String::from("") + &display_id + ".webp";
    //let mut file = File::create(path).unwrap();
    //file.write_all(&buffer[..]).unwrap();


    // Using `image` crate, open the included .jpg file
    let (w,h) = (image.width(), image.height());
    // let size_factor = 1.0;
    // let img: DynamicImage = image::DynamicImage::ImageRgba8(imageops::resize(
    //     &img,
    //     (w as f64 * size_factor) as u32,
    //     (h as f64 * size_factor) as u32,
    //     imageops::FilterType::Triangle,
    // ));

    // let encoder: Encoder = Encoder::from_image(&img).unwrap();
    let encoder: Encoder = Encoder::from_rgb(&buffer, w as u32, h as u32);
    let webp: WebPMemory = encoder.encode(90f32);
    let output_path = Path::new("assets").join("lake").with_extension("webp");
    std::fs::write(&path, &*webp).unwrap();
  }

  // let capturer = Capturer::screen_capturer_from_point(100, 100).unwrap();
  // println!("2capturer {:?}", capturer);

  // let image = capturer.capture_screen().unwrap();
  // let buffer = image.png();
  // let mut file = File::create("capture_display_with_point.png").unwrap();
  // file.write_all(&buffer[..]).unwrap();

  println!("运行耗时: {:?}", start.elapsed())
}

fn main() {
  tauri::Builder::default()
    .invoke_handler(tauri::generate_handler![make_screenshot])
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}
